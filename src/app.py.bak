#!/usr/bin/python3
# coding: utf-8


from flask import Flask, request, render_template, session, logging, url_for, redirect, flash
from flask import escape, make_response
from flask_wtf.csrf import CSRFProtect
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField
from wtforms.validators import DataRequired
import base64, hashlib, random, string
import subprocess


USER_DATABASE = { }


def configure_routes(app, csrf):

	# Perform Content Security Policy
	@app.after_request
	def add_security_headers(resp):
		resp.headers['Content-Security-Policy'] = "default-src 'self'; style-src 'self' stackpath.bootstrapcdn.com;"
		# print(session["csrf_token"])
		return resp

	# Home
	@app.route('/cs9163/hw02/', methods=['GET'])
	def home():
		if 'username' in session:
			return redirect(url_for("spell_check"))
		else:
			return redirect(url_for("login"))

	# Login
	@app.route('/cs9163/hw02/login', methods=['GET', 'POST'])
	def login():
		if "log" in session and session["log"]:
			flash(["success", "User: {} already logged in".format(session["username"])], "success")
			return redirect(url_for("spell_check"))
		else:
			if request.method == 'POST':
				username = request.form.get("uname")
				password = request.form.get("pword")
				phone = request.form.get("twofa")
				(ifLoginSuccess, errorMessage) = login_with_user_info(username, password, phone)
				if ifLoginSuccess:
					session.clear()
					session["log"] = True
					session["username"] = username
					# session["token"] = gen_random_str(16)
					session.permanent = True
					flash(["result", errorMessage], "success")
					# return redirect(url_for("spell_check"))
					resp = make_response(redirect(url_for('spell_check')))
					resp.set_cookie('username', value=session['username'])
					# resp.set_cookie('token', value=session["token"])
					return resp
				else:
					flash(["result", errorMessage], "danger")
					resp = make_response(render_template('./login.html', form=form))
					# return render_template('./login.html')
					return resp
			else:
				resp = make_response(render_template('./login.html', form=form))
				# return render_template('./login.html')
				return resp


	# Logout
	@app.route('/cs9163/hw02/logout', methods=['GET'])
	def logout():
		session.clear()
		# session["log"] = False
		# session.pop("username", None)
		return redirect(url_for("login"))


	# Registeration
	@app.route('/cs9163/hw02/register', methods=['GET', 'POST'])
	# @csrf.exempt
	def register():
		if "log" in session and session["log"]:
			flash(["success", "User: {} already logged in".format(session["username"])], "success")
			return redirect(url_for("spell_check"))
		else:
			if request.method == "POST":
				username = request.form.get("uname")
				password = request.form.get("pword")
				phone = request.form.get("2fa")
				(ifRegisterSuccess, errorMessage) = register_with_user_info(username, password, phone)
				if ifRegisterSuccess:
					flash(["success", errorMessage], "success")
					# resp = make_response(render_template('./login.html', form=form))
					resp = make_response(redirect(url_for("login")))
					# return render_template('./login.html')
					return resp
				else:
					flash(["success", errorMessage], "danger")
					resp = make_response(render_template('./register.html', form=form))
					# return render_template('./register.html')
					return resp
			else:
				resp = make_response(render_template('./register.html', form=form))
				# return render_template('./register.html')
				return resp


	# Spell-Check
	@app.route('/cs9163/hw02/spell_check', methods=['GET', 'POST'])
	def spell_check():
		if request.method == 'POST':
			# token = request.cookies["token"]
			# if ("token" in session) and (session["token"] == token):
			# 	pass
			# else:
			# 	flash(["tokenfailure", "Token in cookie failed"], "danger")
			# 	resp = make_response(redirect(url_for("logout")))
			# 	return resp
			content = request.form.get("inputtext")
			misspelled_words = check_text_spelling(content)
			response = [
				content_encode_escape(content),
				content_encode_escape(misspelled_words)
			]
			resp = make_response(render_template('./spell.html', response=response))
			# return render_template('./spell.html', response=response)
			return resp
		else:
			if "log" in session and session["log"]:
				resp = make_response(render_template('./spell.html', form=form))
				# return render_template('./spell.html')
				return resp
			else:
				return redirect(url_for("login"))


	# Utils
	def content_encode_escape(content):
		# escape: &, <, >, ", '
		content = escape(content).encode().decode()
		return content


	def register_with_user_info(username, password, phone):
		"""
		return ifRegisterSuccess: bool, errorMessage: string
		"""
		if username in USER_DATABASE.keys():
			# Given username has been already registered
			return (False, "failure")
		else:
			USER_DATABASE[username] = {
				"password": password,
				"phone": phone
			}
			return (True, "success")

	def login_with_user_info(username, password, phone):
		"""
		return ifLoginSuccess: bool, errorMessage: string
		"""
		if username not in USER_DATABASE.keys():
			return (False, "Incorrect")
		else:
			if password != USER_DATABASE[username]["password"]:
				return (False, "Incorrect")
			elif phone != USER_DATABASE[username]["phone"]:
				return (False, "Two-factor failure")
			else:
				return (True, "Login success")


	def gen_random_str(num):
		_f = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(num))
		return base64.urlsafe_b64encode(hashlib.md5(_f.encode()).digest()).decode()


	def check_text_spelling(content):
		_tmp_filename = "tmp_" + gen_random_str(16)
		with open(_tmp_filename, "w") as fp:
			fp.write(content)
		proc = subprocess.Popen("./spell-check/a.out ./{} ./spell-check/wordlist.txt".format(_tmp_filename), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		out, err = proc.communicate()
		if err == b'':
			out = out.decode().replace('\n', ',')
		else:
			pass
		subprocess.call("rm -rf ./{}".format(_tmp_filename), shell=True)
		return out


# Create Flask app as a global variable.
# This enables app to be executed by command:
#   - export FLASK_APP=app.py
#   - flask run
app = Flask(__name__, template_folder="./templates")
app.secret_key = "CS9163Assignment02WebsiteFlaskSessionSecretKey"
app.WTF_CSRF_SECRET_KEY = "CS9163Assignment02WebsiteFlaskWTFCSRFToken"
# app.config.from_object('config.settings')
app.config.update(
	SESSION_COOKIE_SECURE=False,
	SESSION_COOKIE_HTTPONLY=True,
	SESSION_COOKIE_SAMESITE='Lax',
	PERMANENT_SESSION_LIFETIME=600
)
csrf = CSRFProtect(app)
configure_routes(app, csrf)


if __name__ == "__main__":
	app.run(debug=True)

